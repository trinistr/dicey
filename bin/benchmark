#!/usr/bin/env ruby
# frozen_string_literal: true

# Set up LOAD_PATH with Bundler if needed
# require "bundler/setup"

# Load supporting libraries
require "fileutils"
require "time"

require "benchmark"
require "benchmark/ips"
require "stackprof"

# Load this gem
require_relative "../lib/dicey"
require_relative "../lib/dicey/cli"

# Set up test data
matrix = 10.step(50, by: 10).flat_map { |count| 10.step(50, by: 10).map { |sides| [count, sides] } }
dice_sets = matrix.map { |count, sides| Dicey::RegularDie.from_count(count, sides) }

# Run benchmark and generate reports
FileUtils.mkdir_p("tmp")
report_path = "tmp/benchmark #{Time.now.iso8601} " \
              "(#{`ruby -v`.chomp}) " \
              "(commit #{`git rev-parse HEAD`.chomp[0..7]}).json"
StackProf.run(mode: :cpu, raw: true, out: "tmp/stackprof.dump") do
  Benchmark.ips do |ips|
    Dicey::DistributionCalculators::AutoSelector::AVAILABLE_CALCULATORS.each do |calc|
      dice_sets.each do |dice|
        next unless calc.valid_for?(dice)

        ips.report("#{calc.class} #{dice.size}d#{dice.first.sides_num}") { calc.call(dice) }
      end
    end

    ips.json!(report_path)
  end
end
puts "Report saved to #{report_path}"

# Generate flamegraph to actually understand StackProf's report
# `stackprof tmp/stackprof.dump --d3-flamegraph > tmp/flamegraph.html`
# puts "Flamegraph saved to tmp/flamegraph.html"
