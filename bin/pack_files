#!/usr/bin/env ruby
# frozen_string_literal: true

# This scripts packs all `require_relative`d files into a single file for ease of distribution.
# Usage: bin/pack_files [files...]
# If no files are specified, root files are lib/*.rb.

# rubocop:disable Style/GlobalVars

# Track relative requires to determine dependencies.

puts "Requiring files to determine dependencies:"

$require_relative_calls = {}
# Replace `Kernel.require_relative` with our own version that tracks dependencies.
def require_relative_with_tracking(path) # rubocop:disable Style/TopLevelMethodDefinition
  caller_path = caller_locations(1, 1).first.path.delete_suffix(".rb")
  required_path = File.absolute_path(path, File.dirname(caller_path)).delete_suffix(".rb")
  $require_relative_calls[caller_path] ||= []
  $require_relative_calls[caller_path] << required_path
  print "."
  require required_path
end
alias original_require_relative require_relative
alias require_relative require_relative_with_tracking

$roots = ARGV.empty? ? Dir["#{Dir.pwd}/lib/*.rb"] : ARGV
$roots.map! { File.absolute_path?(_1) ? _1 : File.absolute_path(_1, Dir.pwd) }
$roots.each do |root|
  print "  ", root.delete_prefix(Dir.pwd).delete_prefix("/")
  root = root.delete_suffix(".rb")
  require root
  puts
end

alias require_relative original_require_relative # rubocop:disable Lint/DuplicateMethods
undef original_require_relative
undef require_relative_with_tracking

# Build a DAG using Rake.

require "rake"

$package = +<<~RUBY
  # frozen_string_literal: true

  # Refinement for this file to skip `require_relative` calls.
  # While generally not needed, some may slip through.
  module RequireRelativeRefinement
    refine Kernel do
      # Do nothing as files are already included.
      def require_relative(_path) = nil
    end
  end

  using RequireRelativeRefinement

RUBY

Rake::Task.define_task(package: [])

# Helper to append files to package.
Rake::Task.define_task(:_append_file, [:file]) do |_task, args|
  content = File.read("#{args[:file]}.rb")
  content.gsub!(%r{^require_relative (['"])[\w./-]+\1$}, "")
  content.gsub!(/\A(?># frozen_string_literal: true)?\n*+/, "")
  content.gsub!(/\n*+\z/, "\n")
  $package << content
  print "."
end

# For each root, make :package depend on it, and define an appending task for it.
$roots.each do |root|
  root = root.delete_suffix(".rb")
  Rake::Task.define_task(root) { Rake::Task[:_append_file].execute(file: root) }
  # Add "root" tasks *after* the header.
  Rake::Task.define_task(package: root)
end

# For each `require_relative`, add append tasks and dependcies.
$require_relative_calls.each do |caller_path, required_paths|
  required_paths.each do |path|
    if Rake::Task.task_defined?(caller_path)
      Rake::Task.define_task(caller_path => path)
    else
      Rake::Task.define_task(caller_path => path) { Rake::Task[:_append_file].execute(file: caller_path) }
    end
    unless Rake::Task.task_defined?(path)
      Rake::Task.define_task(path) { Rake::Task[:_append_file].execute(file: path) }
    end
  end
end

require "fileutils"

FileUtils.mkdir_p("pkg")
package_file = "pkg/#{File.basename(Dir.pwd)}.pack.rb"
print "Packing files into #{package_file}"
Rake::Task[:package].invoke
File.write(package_file, $package)
puts

puts "Done"

# rubocop:enable Style/GlobalVars
